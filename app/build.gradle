import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

plugins {
    id 'com.android.application'
}

android {
    namespace 'com.example.uiautomator'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.uiautomator"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.2'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2'
    implementation 'androidx.navigation:navigation-fragment:2.7.6'
    implementation 'androidx.navigation:navigation-ui:2.7.6'
    implementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    implementation 'androidx.test:monitor:1.5.0'
    implementation 'junit:junit:4.12'
    implementation 'androidx.test:runner:1.4.0'

    // AndroidX 테스트 라이브러리
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'org.jsoup:jsoup:1.14.3'
    implementation 'com.google.code.gson:gson:2.8.8'
}

task runInstrumentedTests(type: Exec) {
    doLast {
        def devices = project.hasProperty('devices') ? project.devices.split(',') : ['defaultDevice']
        // 디바이스별 테스트 실행
    }
    // 원격지 디바이스의 IP 주소를 여기에 입력
//    def remoteDeviceIpAddress = '192.168.75.196:42039'

    // 원격지 디바이스에 연결하는 명령어
//    commandLine 'adb', 'connect', remoteDeviceIpAddress
    // 테스트 실행 태스크 정의
//    commandLine 'adb', 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.uiautomator.uiAutoMator', 'com.example.uiautomator.test/androidx.test.runner.AndroidJUnitRunner'

//    commandLine adb -s emulator-5554 shell am instrument -w -e class com.example.uiautomator.uiAutoMator com.example.uiautomator.test/androidx.test.runner.AndroidJUnitRunner

}
task installApkOnAllDevices {
    doLast {
        def deviceList = []
        "adb devices".execute().text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }

        if (deviceList.isEmpty()) {
            println "No connected devices found."
            return
        }

        deviceList.each { device ->
            try {
                def installCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/debug/app-debug.apk']
                def installProc = installCommand.execute()
                installProc.waitFor()
                if (installProc.exitValue() == 0) {
                    println "Successfully installed APK on device $device"
                } else {
                    println "Failed to install APK on device $device"
                }
            } catch (Exception e) {
                println "Error installing APK on device $device: $e.message"
            }
        }
    }
}
task installTestApkOnAllDevices {
    doLast {
        def deviceList = []
        "adb devices".execute().text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }

        if (deviceList.isEmpty()) {
            println "No connected devices found."
            return
        }

        deviceList.each { device ->
            try {
                def installCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk']
                def installProc = installCommand.execute()
                installProc.waitFor()
                if (installProc.exitValue() == 0) {
                    println "Successfully installed APK on device $device"
                } else {
                    println "Failed to install APK on device $device"
                }
            } catch (Exception e) {
                println "Error installing APK on device $device: $e.message"
            }
        }
    }
}
task uninstallApkFromAllDevices {
    doLast {
        def deviceList = []
        "adb devices".execute().text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }

        if (deviceList.isEmpty()) {
            println "No connected devices found."
            return
        }

        deviceList.each { device ->
            try {
                def uninstallCommand = ['adb', '-s', device, 'uninstall', 'com.example.uiautomator']
                def uninstallProc = uninstallCommand.execute()
                uninstallProc.waitFor()
                if (uninstallProc.exitValue() == 0) {
                    println "Successfully uninstalled APK from device $device"
                } else {
                    println "Failed to uninstall APK from device $device"
                }
            } catch (Exception e) {
                println "Error uninstalling APK from device $device: $e.message"
            }
        }
    }
}
task uninstallTestApkFromAllDevices {
    doLast {
        def deviceList = []
        "adb devices".execute().text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }

        if (deviceList.isEmpty()) {
            println "No connected devices found."
            return
        }

        deviceList.each { device ->
            try {
                def uninstallCommand = ['adb', '-s', device, 'uninstall', 'com.example.uiautomator.test']
                def uninstallProc = uninstallCommand.execute()
                uninstallProc.waitFor()
                if (uninstallProc.exitValue() == 0) {
                    println "Successfully uninstalled APK from device $device"
                } else {
                    println "Failed to uninstall APK from device $device"
                }
            } catch (Exception e) {
                println "Error uninstalling APK from device $device: $e.message"
            }
        }
    }
}
task runParallelTests {
    doLast {
        // 연결된 디바이스 목록 가져오기
        def deviceList = []
        "adb devices".execute().text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }

        // 디바이스가 없으면 경고 메시지 출력 후 종료
        if (deviceList.isEmpty()) {
            println "No connected devices found."
            return
        }

        // 병렬 처리를 위한 ExecutorService 생성
        def executor = Executors.newFixedThreadPool(deviceList.size())

        // 병렬 테스트 실행
        deviceList.each { device ->
            executor.execute {
                try {
                    def command = ['adb', '-s', device, 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.uiautomator.uiAutoMator', 'com.example.uiautomator.test/androidx.test.runner.AndroidJUnitRunner']
                    def proc = command.execute()
                    proc.waitFor()
                    println "Device $device: " + proc.in.text
                } catch (Exception e) {
                    println "Failed to run test on device $device: $e.message"
                }
            }
        }
        // 모든 작업이 완료될 때까지 기다림
        executor.shutdown()
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS)
    }
}
task runParallelTestsForInstall {
    doLast {
        // 연결된 디바이스 목록 가져오기
        def deviceList = []
        "adb devices".execute().text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }

        // 디바이스가 없으면 경고 메시지 출력 후 종료
        if (deviceList.isEmpty()) {
            println "No connected devices found."
            return
        }

        // 병렬 처리를 위한 ExecutorService 생성
        def executor = Executors.newFixedThreadPool(deviceList.size())

        // 병렬 테스트 실행
        deviceList.each { device ->
            executor.execute {
                try {
                    // 기존 APK 제거
                    def uninstallCommand = ['adb', '-s', device, 'uninstall', 'com.example.uiautomator.test']
                    def uninstallProc = uninstallCommand.execute()
                    uninstallProc.waitFor()

                    // APK 파일 설치
                    def installCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk']
                    def installProc = installCommand.execute()
                    installProc.waitFor()
                    if (installProc.exitValue() != 0) {
                        println "Failed to install APK on device $device"
                        return
                    }

                    // 테스트 실행
                    def testCommand = ['adb', '-s', device, 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.uiautomator.uiAutoMator', 'com.example.uiautomator.test/androidx.test.runner.AndroidJUnitRunner']
                    def testProc = testCommand.execute()
                    testProc.waitFor()
                    println "Device $device: " + testProc.in.text
                } catch (Exception e) {
                    println "Failed to run test on device $device: $e.message"
                }
            }
        }
        // 모든 작업이 완료될 때까지 기다림
        executor.shutdown()
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS)
    }
}
