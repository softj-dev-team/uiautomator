import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import java.net.InetAddress
buildscript {
    // buildscript 의존성과 레포지토리 정의
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        // 기타 필요한 레포지토리
    }
    dependencies {
        classpath "org.ajoberstar.grgit:grgit-gradle:4.1.1"
        // 기타 필요한 의존성
    }
}
plugins {
    id 'com.android.application'
    id 'org.ajoberstar.grgit' version '4.1.1'
}

android {
    namespace 'com.example.uiautomator'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.uiautomator"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.2'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2'
    implementation 'androidx.navigation:navigation-fragment:2.7.6'
    implementation 'androidx.navigation:navigation-ui:2.7.6'
    implementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    implementation 'androidx.test:monitor:1.5.0'
    implementation 'junit:junit:4.12'
    implementation 'androidx.test:runner:1.4.0'

    // AndroidX 테스트 라이브러리
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'org.jsoup:jsoup:1.14.3'
    implementation 'com.google.code.gson:gson:2.8.8'
}

task runInstrumentedTests(type: Exec) {
    doLast {
        def devices = project.hasProperty('devices') ? project.devices.split(',') : ['defaultDevice']
        // 디바이스별 테스트 실행
    }
    // 원격지 디바이스의 IP 주소를 여기에 입력
//    def remoteDeviceIpAddress = '192.168.75.196:42039'

    // 원격지 디바이스에 연결하는 명령어
//    commandLine 'adb', 'connect', remoteDeviceIpAddress
    // 테스트 실행 태스크 정의
//    commandLine 'adb', 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.uiautomator.uiAutoMator', 'com.example.uiautomator.test/androidx.test.runner.AndroidJUnitRunner'

//    commandLine adb -s emulator-5554 shell am instrument -w -e class com.example.uiautomator.uiAutoMator com.example.uiautomator.test/androidx.test.runner.AndroidJUnitRunner

}
task stopAppOnAllDevices {
    doLast {
        def deviceList = []

        // 연결된 디바이스 목록 가져오기
        def proc = "adb devices".execute()
        proc.text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }
        // 종료할 애플리케이션의 패키지 목록
        def packageList = ['com.google.android.youtube', 'com.example.uiautomator.uiAutoMator', 'com.example.uiautomator.test']

        // 각 디바이스에 대해 모든 애플리케이션 강제 중지
        deviceList.each { deviceId ->
            packageList.each { packageName ->
                println "Stopping app $packageName on device: $deviceId"
                "adb -s $deviceId shell am force-stop $packageName".execute()
            }
        }
    }
}
task stopAppOnSpecifiedDevices {
    doLast {
        // 외부에서 전달된 디바이스 목록을 가져오기
        if (project.hasProperty('deviceList')) {
            def deviceList = project.deviceList.split(',')

            // 종료할 애플리케이션의 패키지 목록
            def packageList = ['com.google.android.youtube', 'com.example.uiautomator.uiAutoMator', 'com.example.uiautomator.test']

            // 각 디바이스에 대해 모든 애플리케이션 강제 중지
            deviceList.each { deviceId ->
                packageList.each { packageName ->
                    println "Stopping app $packageName on device: $deviceId"
                    "adb -s $deviceId shell am force-stop $packageName".execute()
                }
            }

        } else {
            println "No device list specified. Skipping task."
        }
    }
}


task installApkOnAllDevices {
    doLast {
        def deviceList = []
        "adb devices".execute().text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }

        if (deviceList.isEmpty()) {
            println "No connected devices found."
            return
        }

        deviceList.each { device ->
            try {
                def installCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/debug/app-debug.apk']
                def installProc = installCommand.execute()
                installProc.waitFor()
                if (installProc.exitValue() == 0) {
                    println "Successfully installed APK on device $device"
                } else {
                    println "Failed to install APK on device $device"
                }
            } catch (Exception e) {
                println "Error installing APK on device $device: $e.message"
            }
        }
    }
}
task installTestApkOnAllDevices {
    doLast {
        def deviceList = []
        "adb devices".execute().text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }

        if (deviceList.isEmpty()) {
            println "No connected devices found."
            return
        }

        deviceList.each { device ->
            try {
                def installCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk']
                def installProc = installCommand.execute()
                installProc.waitFor()
                if (installProc.exitValue() == 0) {
                    println "Successfully installed APK on device $device"
                } else {
                    println "Failed to install APK on device $device"
                }
            } catch (Exception e) {
                println "Error installing APK on device $device: $e.message"
            }
        }
    }
}
task uninstallApkFromAllDevices {
    doLast {
        def deviceList = []
        "adb devices".execute().text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }

        if (deviceList.isEmpty()) {
            println "No connected devices found."
            return
        }

        deviceList.each { device ->
            try {
                def uninstallCommand = ['adb', '-s', device, 'uninstall', 'com.example.uiautomator']
                def uninstallProc = uninstallCommand.execute()
                uninstallProc.waitFor()
                if (uninstallProc.exitValue() == 0) {
                    println "Successfully uninstalled APK from device $device"
                } else {
                    println "Failed to uninstall APK from device $device"
                }
            } catch (Exception e) {
                println "Error uninstalling APK from device $device: $e.message"
            }
        }
    }
}
task uninstallTestApkFromAllDevices {
    doLast {
        def deviceList = []
        "adb devices".execute().text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }

        if (deviceList.isEmpty()) {
            println "No connected devices found."
            return
        }

        deviceList.each { device ->
            try {
                def uninstallCommand = ['adb', '-s', device, 'uninstall', 'com.example.uiautomator.test']
                def uninstallProc = uninstallCommand.execute()
                uninstallProc.waitFor()
                if (uninstallProc.exitValue() == 0) {
                    println "Successfully uninstalled APK from device $device"
                } else {
                    println "Failed to uninstall APK from device $device"
                }
            } catch (Exception e) {
                println "Error uninstalling APK from device $device: $e.message"
            }
        }
    }
}
task runParallelTests {
    doLast {
        // 연결된 디바이스 목록 가져오기
        def deviceList = []
        "adb devices".execute().text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }

        // 디바이스가 없으면 경고 메시지 출력 후 종료
        if (deviceList.isEmpty()) {
            println "No connected devices found."
            return
        }

        // 병렬 처리를 위한 ExecutorService 생성
        def executor = Executors.newFixedThreadPool(deviceList.size())

        // 병렬 테스트 실행
        deviceList.each { device ->
            executor.execute {
                try {
                    def command = ['adb', '-s', device, 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.uiautomator.uiAutoMator', 'com.example.uiautomator.test/androidx.test.runner.AndroidJUnitRunner']
                    def proc = command.execute()
                    proc.waitFor()
                    println "Device $device: " + proc.in.text
                } catch (Exception e) {
                    println "Failed to run test on device $device: $e.message"
                }
            }
        }
        // 모든 작업이 완료될 때까지 기다림
        executor.shutdown()
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS)
    }
}
tasks.register('runParallelTestsForInstallGetDevices') {
    doLast {
        // 로그 파일 경로 설정
        def logFilePath = "${project.buildDir}/logs/runParallelTestsForInstallGetDevices.log"
        def logFile = new File(logFilePath)
        // 로그 파일의 디렉토리가 없으면 생성
        if (!logFile.parentFile.exists()) {
            logFile.parentFile.mkdirs()
        }
        BufferedWriter writer = new BufferedWriter(new FileWriter(logFile, true))
        writer.write('runParallelTestsForInstallGetDevices 시작\n')

        // 외부에서 전달된 디바이스 목록을 가져오기
        def deviceList = project.hasProperty('deviceList') ? project.deviceList.split(',') : []
        println "Devices: ${deviceList}"
        // 예를 들어, 디바이스 리스트 및 IP 범위 로깅
        writer.write("디바이스 목록: ${deviceList.join(', ')}\n")

        // 디바이스 목록이 비어있는지 확인
        if (deviceList.length == 0) {
            println "No devices specified."
            return
        }

        // 병렬 처리를 위한 ExecutorService 생성
        def executor = Executors.newFixedThreadPool(deviceList.size())

        // 병렬 테스트 실행
        deviceList.each { device ->
            executor.execute {
                try {
                    def uninstallCommand = ['adb', '-s', device, 'uninstall', 'com.example.uiautomator.test']
                    def uninstallProc = uninstallCommand.execute()
                    uninstallProc.waitFor()
                    if (uninstallProc.exitValue() != 0) {
                        println "Failed to uninstallProc on device $device"
                        return
                    }
                    // 기존 APK 제거
                    def uninstallMainCommand = ['adb', '-s', device, 'uninstall', 'com.example.uiautomator']
                    def uninstallMainProc = uninstallMainCommand.execute()
                    uninstallMainProc.waitFor()
                    if (uninstallMainProc.exitValue() != 0) {
                        println "Failed to uninstallMainProc on device $device"
                        return
                    }
//                     APK 파일 설치 Main
                    def installMainCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/debug/app-debug.apk']
                    def installMainProc = installMainCommand.execute()
                    installMainProc.waitFor()
                    if (installMainProc.exitValue() != 0) {
                        println "Failed to install main APK on device $device"
                        return
                    }

//                     APK 파일 설치 TEST
                    def installTestCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk']
                    def installTestProc = installTestCommand.execute()
                    installTestProc.waitFor()
                    if (installTestProc.exitValue() != 0) {
                        println "Failed to install test APK on device $device"
                        return
                    }

                    // 테스트 실행
                    def testCommand = ['adb', '-s', device, 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.uiautomator.uiAutoMator', 'com.example.uiautomator.test/androidx.test.runner.AndroidJUnitRunner']
                    def testProc = testCommand.execute()
                    testProc.waitFor()
                    println "Device $device: " + testProc.in.text

                    writer.write("Device $device: " + testProc.in.text)

                } catch (Exception e) {
                    println "Failed to run test on device $device: $e.message"
                    writer.write("Failed to run test on device $device: $e.message")
                }
            }
        }
        // 모든 작업이 완료될 때까지 기다림
        executor.shutdown()
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS)
    }
}

tasks.register('runParallelTestsForInstall-asis') {
    doLast {
        // 연결된 디바이스 목록 가져오기
        def deviceList = []
        "adb devices".execute().text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }

        // 디바이스가 없으면 경고 메시지 출력 후 종료
        if (deviceList.isEmpty()) {
            println "No connected devices found."
            return
        }

        // 병렬 처리를 위한 ExecutorService 생성
        def executor = Executors.newFixedThreadPool(deviceList.size())

        // 병렬 테스트 실행
        deviceList.each { device ->
            executor.execute {
                try {
//                    // 기존 APK 제거
//                    def uninstallCommand = ['adb', '-s', device, 'uninstall', 'com.example.uiautomator.test']
//                    def uninstallProc = uninstallCommand.execute()
//                    uninstallProc.waitFor()
//                    if (uninstallProc.exitValue() != 0) {
//                        println "Failed to uninstallProc on device $device"
//                        return
//                    }
//                    // 기존 APK 제거
//                    def uninstallMainCommand = ['adb', '-s', device, 'uninstall', 'com.example.uiautomator']
//                    def uninstallMainProc = uninstallMainCommand.execute()
//                    uninstallMainProc.waitFor()
//                    if (uninstallMainProc.exitValue() != 0) {
//                        println "Failed to uninstallMainProc on device $device"
//                        return
//                    }
                    // APK 파일 설치 Main
//                    def installMainCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/debug/app-debug.apk']
//                    def installMainProc = installMainCommand.execute()
//                    installMainProc.waitFor()
//                    if (installMainProc.exitValue() != 0) {
//                        println "Failed to install main APK on device $device"
//                        return
//                    }

                    // APK 파일 설치 TEST
//                    def installTestCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk']
//                    def installTestProc = installTestCommand.execute()
//                    installTestProc.waitFor()
//                    if (installTestProc.exitValue() != 0) {
//                        println "Failed to install test APK on device $device"
//                        return
//                    }

                    // 테스트 실행
                    def testCommand = ['adb', '-s', device, 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.uiautomator.uiAutoMator', 'com.example.uiautomator.test/androidx.test.runner.AndroidJUnitRunner']
                    def testProc = testCommand.execute()
                    testProc.waitFor()
                    println "Device $device: " + testProc.in.text
                } catch (Exception e) {
                    println "Failed to run test on device $device: $e.message"
                }
            }
        }
        // 모든 작업이 완료될 때까지 기다림
        executor.shutdown()
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS)
    }
}
tasks.register('runParallelTestsForInstall') {
    doLast {
        // 연결된 디바이스 목록 가져오기
        def deviceList = []
        "adb devices".execute().text.eachLine { line ->
            if (line.endsWith("device")) {
                def device = line.split()[0]
                deviceList.add(device)
            }
        }

        // 디바이스가 없으면 경고 메시지 출력 후 종료
        if (deviceList.isEmpty()) {
            println "No connected devices found."
            return
        }

        // 병렬 처리를 위한 ExecutorService 생성
        def executor = Executors.newFixedThreadPool(deviceList.size())

        // 초기 지연 시간
        def initialDelay = 0
        // 테스트 간격 (15초)
        def testInterval = 15

        // 병렬 테스트 실행
        deviceList.each { device ->
            executor.scheduleWithFixedDelay({
                try {
                    // 테스트 실행
                    def testCommand = ['adb', '-s', device, 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.uiautomator.uiAutoMator', 'com.example.uiautomator.test/androidx.test.runner.AndroidJUnitRunner']
                    def testProc = testCommand.execute()
                    testProc.waitFor()
                    println "Device $device: " + testProc.in.text
                } catch (Exception e) {
                    println "Failed to run test on device $device: $e.message"
                }
            }, initialDelay, testInterval, TimeUnit.SECONDS)

            // 초기 지연 시간 업데이트 (15초 간격으로)
            initialDelay += testInterval
        }

        // 모든 작업이 완료될 때까지 기다림
        executor.shutdown()
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS)
    }
}
tasks.register('gitPullOriginMain') {
    doLast {
        def grgit = grgit.open(dir: file('../'))

        // 원격 저장소의 master 브랜치를 fetch
        grgit.fetch(refSpecs: ['+refs/heads/master:refs/remotes/origin/master'])

        // 원격 저장소의 master 브랜치 최신 커밋 가져오기
        def commit = grgit.resolve.toCommit('refs/remotes/origin/master')

        // 현재 브랜치를 해당 커밋으로 강제 리셋
        grgit.reset(commit: commit, mode: 'HARD')

        grgit.close()
    }
}

def generateIpList(String startIp, String endIp) {
    def start = InetAddress.getByName(startIp).address
    def end = InetAddress.getByName(endIp).address
    def ips = []
    int compare = startIp.compareTo(endIp)
    while (compare <= 0) {
        ips.add(startIp)
        start[3]++
        if (start[3] == 0) {
            start[2]++
            if (start[2] == 0) {
                start[1]++
                if (start[1] == 0) {
                    start[0]++
                }
            }
        }
        startIp = InetAddress.getByAddress(start).hostAddress
        compare = startIp.compareTo(endIp)
    }
    return ips
}

tasks.register('runWifiConfigTests') {

    doLast {
        // 로그 파일 경로 설정
        def logFilePath = "${project.buildDir}/logs/runWifiConfigTests.log"
        def logFile = new File(logFilePath)
        // 로그 파일의 디렉토리가 없으면 생성
        if (!logFile.parentFile.exists()) {
            logFile.parentFile.mkdirs()
        }
        BufferedWriter writer = new BufferedWriter(new FileWriter(logFile, true))
        writer.write('runWifiConfigTests 시작\n')
        // IP 주소 범위와 디바이스 목록을 설정
        def ipRange = project.hasProperty('ipRange') ? project.property('ipRange') : "192.168.0.1-192.168.0.5"
        def (startIp, endIp) = ipRange.split('-')
        def ipList = generateIpList(startIp, endIp)
        def deviceList = project.hasProperty('deviceList') ? project.property('deviceList').split(",") : []
        def wifiName = project.property('wifiName')
        def wifiPassword = project.property('wifiPassword')
        def gateway = project.property('gateway')
        def maskbit = project.property('maskbit')
        def dns1 = project.property('dns1')
        def dns2 = project.property('dns2')
        def testClass = "com.example.uiautomator.wifiRunConfig"
        def testPackage = "com.example.uiautomator.test"

        // ExecutorService를 사용하여 디바이스 목록 크기에 맞는 스레드 풀을 생성
        def executor = Executors.newFixedThreadPool(deviceList.size())


        // 예를 들어, 디바이스 리스트 및 IP 범위 로깅
        writer.write("디바이스 목록: ${deviceList.join(', ')}\n")
        writer.write("IP 범위: ${ipRange}\n")

        // 각 디바이스와 IP에 대한 테스트를 병렬로 실행
        deviceList.eachWithIndex { device, index ->
            // ExecutorService를 사용하여 병렬 실행
            executor.execute {
                try {
                    def ip = ipList.size() > index ? ipList[index] : ""

//                    def uninstallCommand = ['adb', '-s', device, 'uninstall', 'com.example.uiautomator.test']
//                    def uninstallProc = uninstallCommand.execute()
//                    uninstallProc.waitFor()
//                    if (uninstallProc.exitValue() != 0) {
//                        println "Failed to uninstallProc on device $device"
//                        return
//                    }
//
//                    def uninstallMainCommand = ['adb', '-s', device, 'uninstall', 'com.example.uiautomator']
//                    def uninstallMainProc = uninstallMainCommand.execute()
//                    uninstallMainProc.waitFor()
//                    if (uninstallMainProc.exitValue() != 0) {
//                        println "Failed to uninstallMainProc on device $device"
//                        return
//                    }
                    // APK 파일 설치 Main
//                    def installMainCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/debug/app-debug.apk']
//                    def installMainProc = installMainCommand.execute()
//                    installMainProc.waitFor()
//                    if (installMainProc.exitValue() != 0) {
//                        println "Failed to install main APK on device $device"
//                        return
//                    }

                    // APK 파일 설치 TEST
//                    def installTestCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk']
//                    def installTestProc = installTestCommand.execute()
//                    installTestProc.waitFor()
//                    if (installTestProc.exitValue() != 0) {
//                        println "Failed to install test APK on device $device"
//                        return
//                    }

                    // ADB 명령 구성
                    def command = "adb -s ${device} shell am instrument -w -e wifiName \"${wifiName}\" -e wifiPassword \"${wifiPassword}\" -e ip \"${ip}\" -e gateway \"${gateway}\" -e maskbit \"${maskbit}\"  -e dns1 \"${dns1}\" -e dns2 \"${dns2}\" -e class ${testClass} ${testPackage}/androidx.test.runner.AndroidJUnitRunner"
                    def testProc = command.execute()
                    testProc.waitFor()
                    println "Device $device: " + testProc.in.text
                } catch (Exception e) {
                    println "Failed to run test on device $device: $e.message"
                    writer.write("오류 발생: ${e.message}\n")
                }finally {
                    writer.close() // BufferedWriter 닫기
                }

            }
        }
        executor.shutdown()
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS)
        // 모든 테스트 실행이 완료될 때까지 기다림
    }
}

tasks.register('runGoogleAccountTest') {

    doLast {
        def deviceList = project.hasProperty('deviceList') ? project.property('deviceList').split(",") : []
        // ExecutorService를 사용하여 디바이스 목록 크기에 맞는 스레드 풀을 생성
        def executor = Executors.newFixedThreadPool(deviceList.size())
        def testClass = "com.example.uiautomator.uiAutoMatorAccountChange"
        def testPackage = "com.example.uiautomator.test"
        // 각 디바이스와 IP에 대한 테스트를 병렬로 실행
        deviceList.eachWithIndex { device, index ->
            // ExecutorService를 사용하여 병렬 실행
            executor.execute {
                try {
                    // APK 파일 설치 Main
//                    def installMainCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/debug/app-debug.apk']
//                    def installMainProc = installMainCommand.execute()
//                    installMainProc.waitFor()
//                    if (installMainProc.exitValue() != 0) {
//                        println "Failed to install main APK on device $device"
//                        return
//                    }

                    // APK 파일 설치 TEST
//                    def installTestCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk']
//                    def installTestProc = installTestCommand.execute()
//                    installTestProc.waitFor()
//                    if (installTestProc.exitValue() != 0) {
//                        println "Failed to install test APK on device $device"
//                        return
//                    }

                    // ADB 명령 구성
                    def command = "adb -s ${device} shell am instrument -w -e class ${testClass} ${testPackage}/androidx.test.runner.AndroidJUnitRunner"
                    def testProc = command.execute()
                    testProc.waitFor()
                    println "Device $device: " + testProc.in.text
                } catch (Exception e) {
                    println "Failed to run test on device $device: $e.message"
                }


            }
        }
        executor.shutdown()
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS)
        // 모든 테스트 실행이 완료될 때까지 기다림
    }
}

tasks.register('runScreenLockDiable') {

    doLast {
        // 로그 파일 경로 설정
        def logFilePath = "${project.buildDir}/logs/runScreenLockDiable.log"
        def logFile = new File(logFilePath)
        // 로그 파일의 디렉토리가 없으면 생성
        if (!logFile.parentFile.exists()) {
            logFile.parentFile.mkdirs()
        }
        BufferedWriter writer = new BufferedWriter(new FileWriter(logFile, true))
        writer.write('runScreenLockDiable 시작\n')
        def deviceList = project.hasProperty('deviceList') ? project.property('deviceList').split(",") : []
        // ExecutorService를 사용하여 디바이스 목록 크기에 맞는 스레드 풀을 생성
        def executor = Executors.newFixedThreadPool(deviceList.size())
        def testClass = "com.example.uiautomator.screenLock"
        def testPackage = "com.example.uiautomator.test"

        writer.write("디바이스 목록: ${deviceList.join(', ')}\n")

        // 각 디바이스와 IP에 대한 테스트를 병렬로 실행
        deviceList.eachWithIndex { device, index ->
            // ExecutorService를 사용하여 병렬 실행
            executor.execute {
                try {
//                     APK 파일 설치 Main
                    def installMainCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/debug/app-debug.apk']
                    def installMainProc = installMainCommand.execute()
                    installMainProc.waitFor()
                    if (installMainProc.exitValue() != 0) {
                        println "Failed to install main APK on device $device"
                        return
                    }

//                     APK 파일 설치 TEST
                    def installTestCommand = ['adb', '-s', device, 'install', '-r', './app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk']
                    def installTestProc = installTestCommand.execute()
                    installTestProc.waitFor()
                    if (installTestProc.exitValue() != 0) {
                        println "Failed to install test APK on device $device"
                        return
                    }

                    // ADB 명령 구성
                    def command = "adb -s ${device} shell am instrument -w -e class ${testClass} ${testPackage}/androidx.test.runner.AndroidJUnitRunner"
                    def testProc = command.execute()
                    testProc.waitFor()
                    println "Device $device: " + testProc.in.text
                } catch (Exception e) {
                    println "Failed to run test on device $device: $e.message"
                }


            }
        }
        executor.shutdown()
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS)
        // 모든 테스트 실행이 완료될 때까지 기다림
    }
}